using System;
using System.Collections;
using System.Collections.Generic;
using MugCup_BlockBuilder;
using UnityEngine;

namespace BlockBuilder.Core.Scriptable
{
    [CreateAssetMenu(fileName = "CornerMeshData", menuName = "ScriptableObjects/CornerMeshDataObject", order = 7)]
    public class CornerMeshData : ScriptableObject
    {
        public Module P_0000_0000;
        public Module P_0000_0001;
        public Module P_0000_0010;
        public Module P_0000_0011;
        public Module P_0000_0100;
        public Module P_0000_0101;
        public Module P_0000_0110;
        public Module P_0000_0111;
        public Module P_0000_1000;
        public Module P_0000_1001;
        public Module P_0000_1010;
        public Module P_0000_1011;
        public Module P_0000_1100;
        public Module P_0000_1101;
        public Module P_0000_1110;
        public Module P_0000_1111;
        public Module P_0001_0000;
        public Module P_0001_0001;
        public Module P_0001_0010;
        public Module P_0001_0011;
        public Module P_0001_0100;
        public Module P_0001_0101;
        public Module P_0001_0110;
        public Module P_0001_0111;
        public Module P_0001_1000;
        public Module P_0001_1001;
        public Module P_0001_1010;
        public Module P_0001_1011;
        public Module P_0001_1100;
        public Module P_0001_1101;
        public Module P_0001_1110;
        public Module P_0001_1111;
        public Module P_0010_0000;
        public Module P_0010_0001;
        public Module P_0010_0010;
        public Module P_0010_0011;
        public Module P_0010_0100;
        public Module P_0010_0101;
        public Module P_0010_0110;
        public Module P_0010_0111;
        public Module P_0010_1000;
        public Module P_0010_1001;
        public Module P_0010_1010;
        public Module P_0010_1011;
        public Module P_0010_1100;
        public Module P_0010_1101;
        public Module P_0010_1110;
        public Module P_0010_1111;
        public Module P_0011_0000;
        public Module P_0011_0001;
        public Module P_0011_0010;
        public Module P_0011_0011;
        public Module P_0011_0100;
        public Module P_0011_0101;
        public Module P_0011_0110;
        public Module P_0011_0111;
        public Module P_0011_1000;
        public Module P_0011_1001;
        public Module P_0011_1010;
        public Module P_0011_1011;
        public Module P_0011_1100;
        public Module P_0011_1101;
        public Module P_0011_1110;
        public Module P_0011_1111;
        public Module P_0100_0000;
        public Module P_0100_0001;
        public Module P_0100_0010;
        public Module P_0100_0011;
        public Module P_0100_0100;
        public Module P_0100_0101;
        public Module P_0100_0110;
        public Module P_0100_0111;
        public Module P_0100_1000;
        public Module P_0100_1001;
        public Module P_0100_1010;
        public Module P_0100_1011;
        public Module P_0100_1100;
        public Module P_0100_1101;
        public Module P_0100_1110;
        public Module P_0100_1111;
        public Module P_0101_0000;
        public Module P_0101_0001;
        public Module P_0101_0010;
        public Module P_0101_0011;
        public Module P_0101_0100;
        public Module P_0101_0101;
        public Module P_0101_0110;
        public Module P_0101_0111;
        public Module P_0101_1000;
        public Module P_0101_1001;
        public Module P_0101_1010;
        public Module P_0101_1011;
        public Module P_0101_1100;
        public Module P_0101_1101;
        public Module P_0101_1110;
        public Module P_0101_1111;
        public Module P_0110_0000;
        public Module P_0110_0001;
        public Module P_0110_0010;
        public Module P_0110_0011;
        public Module P_0110_0100;
        public Module P_0110_0101;
        public Module P_0110_0110;
        public Module P_0110_0111;
        public Module P_0110_1000;
        public Module P_0110_1001;
        public Module P_0110_1010;
        public Module P_0110_1011;
        public Module P_0110_1100;
        public Module P_0110_1101;
        public Module P_0110_1110;
        public Module P_0110_1111;
        public Module P_0111_0000;
        public Module P_0111_0001;
        public Module P_0111_0010;
        public Module P_0111_0011;
        public Module P_0111_0100;
        public Module P_0111_0101;
        public Module P_0111_0110;
        public Module P_0111_0111;
        public Module P_0111_1000;
        public Module P_0111_1001;
        public Module P_0111_1010;
        public Module P_0111_1011;
        public Module P_0111_1100;
        public Module P_0111_1101;
        public Module P_0111_1110;
        public Module P_0111_1111;
        public Module P_1000_0000;
        public Module P_1000_0001;
        public Module P_1000_0010;
        public Module P_1000_0011;
        public Module P_1000_0100;
        public Module P_1000_0101;
        public Module P_1000_0110;
        public Module P_1000_0111;
        public Module P_1000_1000;
        public Module P_1000_1001;
        public Module P_1000_1010;
        public Module P_1000_1011;
        public Module P_1000_1100;
        public Module P_1000_1101;
        public Module P_1000_1110;
        public Module P_1000_1111;
        public Module P_1001_0000;
        public Module P_1001_0001;
        public Module P_1001_0010;
        public Module P_1001_0011;
        public Module P_1001_0100;
        public Module P_1001_0101;
        public Module P_1001_0110;
        public Module P_1001_0111;
        public Module P_1001_1000;
        public Module P_1001_1001;
        public Module P_1001_1010;
        public Module P_1001_1011;
        public Module P_1001_1100;
        public Module P_1001_1101;
        public Module P_1001_1110;
        public Module P_1001_1111;
        public Module P_1010_0000;
        public Module P_1010_0001;
        public Module P_1010_0010;
        public Module P_1010_0011;
        public Module P_1010_0100;
        public Module P_1010_0101;
        public Module P_1010_0110;
        public Module P_1010_0111;
        public Module P_1010_1000;
        public Module P_1010_1001;
        public Module P_1010_1010;
        public Module P_1010_1011;
        public Module P_1010_1100;
        public Module P_1010_1101;
        public Module P_1010_1110;
        public Module P_1010_1111;
        public Module P_1011_0000;
        public Module P_1011_0001;
        public Module P_1011_0010;
        public Module P_1011_0011;
        public Module P_1011_0100;
        public Module P_1011_0101;
        public Module P_1011_0110;
        public Module P_1011_0111;
        public Module P_1011_1000;
        public Module P_1011_1001;
        public Module P_1011_1010;
        public Module P_1011_1011;
        public Module P_1011_1100;
        public Module P_1011_1101;
        public Module P_1011_1110;
        public Module P_1011_1111;
        public Module P_1100_0000;
        public Module P_1100_0001;
        public Module P_1100_0010;
        public Module P_1100_0011;
        public Module P_1100_0100;
        public Module P_1100_0101;
        public Module P_1100_0110;
        public Module P_1100_0111;
        public Module P_1100_1000;
        public Module P_1100_1001;
        public Module P_1100_1010;
        public Module P_1100_1011;
        public Module P_1100_1100;
        public Module P_1100_1101;
        public Module P_1100_1110;
        public Module P_1100_1111;
        public Module P_1101_0000;
        public Module P_1101_0001;
        public Module P_1101_0010;
        public Module P_1101_0011;
        public Module P_1101_0100;
        public Module P_1101_0101;
        public Module P_1101_0110;
        public Module P_1101_0111;
        public Module P_1101_1000;
        public Module P_1101_1001;
        public Module P_1101_1010;
        public Module P_1101_1011;
        public Module P_1101_1100;
        public Module P_1101_1101;
        public Module P_1101_1110;
        public Module P_1101_1111;
        public Module P_1110_0000;
        public Module P_1110_0001;
        public Module P_1110_0010;
        public Module P_1110_0011;
        public Module P_1110_0100;
        public Module P_1110_0101;
        public Module P_1110_0110;
        public Module P_1110_0111;
        public Module P_1110_1000;
        public Module P_1110_1001;
        public Module P_1110_1010;
        public Module P_1110_1011;
        public Module P_1110_1100;
        public Module P_1110_1101;
        public Module P_1110_1110;
        public Module P_1110_1111;
        public Module P_1111_0000;
        public Module P_1111_0001;
        public Module P_1111_0010;
        public Module P_1111_0011;
        public Module P_1111_0100;
        public Module P_1111_0101;
        public Module P_1111_0110;
        public Module P_1111_0111;
        public Module P_1111_1000;
        public Module P_1111_1001;
        public Module P_1111_1010;
        public Module P_1111_1011;
        public Module P_1111_1100;
        public Module P_1111_1101;
        public Module P_1111_1110;
        public Module P_1111_1111;

        public void AddPrototypeData(int _bit, Module _data)
        {
            if (_bit == BitTable.B_0000_0000) P_0000_0000 = _data;
            if (_bit == BitTable.B_0000_0001) P_0000_0001 = _data;
            if (_bit == BitTable.B_0000_0010) P_0000_0010 = _data;
            if (_bit == BitTable.B_0000_0011) P_0000_0011 = _data;
            if (_bit == BitTable.B_0000_0100) P_0000_0100 = _data;
            if (_bit == BitTable.B_0000_0101) P_0000_0101 = _data;
            if (_bit == BitTable.B_0000_0110) P_0000_0110 = _data;
            if (_bit == BitTable.B_0000_0111) P_0000_0111 = _data;
            if (_bit == BitTable.B_0000_1000) P_0000_1000 = _data;
            if (_bit == BitTable.B_0000_1001) P_0000_1001 = _data;
            if (_bit == BitTable.B_0000_1010) P_0000_1010 = _data;
            if (_bit == BitTable.B_0000_1011) P_0000_1011 = _data;
            if (_bit == BitTable.B_0000_1100) P_0000_1100 = _data;
            if (_bit == BitTable.B_0000_1101) P_0000_1101 = _data;
            if (_bit == BitTable.B_0000_1110) P_0000_1110 = _data;
            if (_bit == BitTable.B_0000_1111) P_0000_1111 = _data;
            if (_bit == BitTable.B_0001_0000) P_0001_0000 = _data;
            if (_bit == BitTable.B_0001_0001) P_0001_0001 = _data;
            if (_bit == BitTable.B_0001_0010) P_0001_0010 = _data;
            if (_bit == BitTable.B_0001_0011) P_0001_0011 = _data;
            if (_bit == BitTable.B_0001_0100) P_0001_0100 = _data;
            if (_bit == BitTable.B_0001_0101) P_0001_0101 = _data;
            if (_bit == BitTable.B_0001_0110) P_0001_0110 = _data;
            if (_bit == BitTable.B_0001_0111) P_0001_0111 = _data;
            if (_bit == BitTable.B_0001_1000) P_0001_1000 = _data;
            if (_bit == BitTable.B_0001_1001) P_0001_1001 = _data;
            if (_bit == BitTable.B_0001_1010) P_0001_1010 = _data;
            if (_bit == BitTable.B_0001_1011) P_0001_1011 = _data;
            if (_bit == BitTable.B_0001_1100) P_0001_1100 = _data;
            if (_bit == BitTable.B_0001_1101) P_0001_1101 = _data;
            if (_bit == BitTable.B_0001_1110) P_0001_1110 = _data;
            if (_bit == BitTable.B_0001_1111) P_0001_1111 = _data;
            if (_bit == BitTable.B_0010_0000) P_0010_0000 = _data;
            if (_bit == BitTable.B_0010_0001) P_0010_0001 = _data;
            if (_bit == BitTable.B_0010_0010) P_0010_0010 = _data;
            if (_bit == BitTable.B_0010_0011) P_0010_0011 = _data;
            if (_bit == BitTable.B_0010_0100) P_0010_0100 = _data;
            if (_bit == BitTable.B_0010_0101) P_0010_0101 = _data;
            if (_bit == BitTable.B_0010_0110) P_0010_0110 = _data;
            if (_bit == BitTable.B_0010_0111) P_0010_0111 = _data;
            if (_bit == BitTable.B_0010_1000) P_0010_1000 = _data;
            if (_bit == BitTable.B_0010_1001) P_0010_1001 = _data;
            if (_bit == BitTable.B_0010_1010) P_0010_1010 = _data;
            if (_bit == BitTable.B_0010_1011) P_0010_1011 = _data;
            if (_bit == BitTable.B_0010_1100) P_0010_1100 = _data;
            if (_bit == BitTable.B_0010_1101) P_0010_1101 = _data;
            if (_bit == BitTable.B_0010_1110) P_0010_1110 = _data;
            if (_bit == BitTable.B_0010_1111) P_0010_1111 = _data;
            if (_bit == BitTable.B_0011_0000) P_0011_0000 = _data;
            if (_bit == BitTable.B_0011_0001) P_0011_0001 = _data;
            if (_bit == BitTable.B_0011_0010) P_0011_0010 = _data;
            if (_bit == BitTable.B_0011_0011) P_0011_0011 = _data;
            if (_bit == BitTable.B_0011_0100) P_0011_0100 = _data;
            if (_bit == BitTable.B_0011_0101) P_0011_0101 = _data;
            if (_bit == BitTable.B_0011_0110) P_0011_0110 = _data;
            if (_bit == BitTable.B_0011_0111) P_0011_0111 = _data;
            if (_bit == BitTable.B_0011_1000) P_0011_1000 = _data;
            if (_bit == BitTable.B_0011_1001) P_0011_1001 = _data;
            if (_bit == BitTable.B_0011_1010) P_0011_1010 = _data;
            if (_bit == BitTable.B_0011_1011) P_0011_1011 = _data;
            if (_bit == BitTable.B_0011_1100) P_0011_1100 = _data;
            if (_bit == BitTable.B_0011_1101) P_0011_1101 = _data;
            if (_bit == BitTable.B_0011_1110) P_0011_1110 = _data;
            if (_bit == BitTable.B_0011_1111) P_0011_1111 = _data;
            if (_bit == BitTable.B_0100_0000) P_0100_0000 = _data;
            if (_bit == BitTable.B_0100_0001) P_0100_0001 = _data;
            if (_bit == BitTable.B_0100_0010) P_0100_0010 = _data;
            if (_bit == BitTable.B_0100_0011) P_0100_0011 = _data;
            if (_bit == BitTable.B_0100_0100) P_0100_0100 = _data;
            if (_bit == BitTable.B_0100_0101) P_0100_0101 = _data;
            if (_bit == BitTable.B_0100_0110) P_0100_0110 = _data;
            if (_bit == BitTable.B_0100_0111) P_0100_0111 = _data;
            if (_bit == BitTable.B_0100_1000) P_0100_1000 = _data;
            if (_bit == BitTable.B_0100_1001) P_0100_1001 = _data;
            if (_bit == BitTable.B_0100_1010) P_0100_1010 = _data;
            if (_bit == BitTable.B_0100_1011) P_0100_1011 = _data;
            if (_bit == BitTable.B_0100_1100) P_0100_1100 = _data;
            if (_bit == BitTable.B_0100_1101) P_0100_1101 = _data;
            if (_bit == BitTable.B_0100_1110) P_0100_1110 = _data;
            if (_bit == BitTable.B_0100_1111) P_0100_1111 = _data;
            if (_bit == BitTable.B_0101_0000) P_0101_0000 = _data;
            if (_bit == BitTable.B_0101_0001) P_0101_0001 = _data;
            if (_bit == BitTable.B_0101_0010) P_0101_0010 = _data;
            if (_bit == BitTable.B_0101_0011) P_0101_0011 = _data;
            if (_bit == BitTable.B_0101_0100) P_0101_0100 = _data;
            if (_bit == BitTable.B_0101_0101) P_0101_0101 = _data;
            if (_bit == BitTable.B_0101_0110) P_0101_0110 = _data;
            if (_bit == BitTable.B_0101_0111) P_0101_0111 = _data;
            if (_bit == BitTable.B_0101_1000) P_0101_1000 = _data;
            if (_bit == BitTable.B_0101_1001) P_0101_1001 = _data;
            if (_bit == BitTable.B_0101_1010) P_0101_1010 = _data;
            if (_bit == BitTable.B_0101_1011) P_0101_1011 = _data;
            if (_bit == BitTable.B_0101_1100) P_0101_1100 = _data;
            if (_bit == BitTable.B_0101_1101) P_0101_1101 = _data;
            if (_bit == BitTable.B_0101_1110) P_0101_1110 = _data;
            if (_bit == BitTable.B_0101_1111) P_0101_1111 = _data;
            if (_bit == BitTable.B_0110_0000) P_0110_0000 = _data;
            if (_bit == BitTable.B_0110_0001) P_0110_0001 = _data;
            if (_bit == BitTable.B_0110_0010) P_0110_0010 = _data;
            if (_bit == BitTable.B_0110_0011) P_0110_0011 = _data;
            if (_bit == BitTable.B_0110_0100) P_0110_0100 = _data;
            if (_bit == BitTable.B_0110_0101) P_0110_0101 = _data;
            if (_bit == BitTable.B_0110_0110) P_0110_0110 = _data;
            if (_bit == BitTable.B_0110_0111) P_0110_0111 = _data;
            if (_bit == BitTable.B_0110_1000) P_0110_1000 = _data;
            if (_bit == BitTable.B_0110_1001) P_0110_1001 = _data;
            if (_bit == BitTable.B_0110_1010) P_0110_1010 = _data;
            if (_bit == BitTable.B_0110_1011) P_0110_1011 = _data;
            if (_bit == BitTable.B_0110_1100) P_0110_1100 = _data;
            if (_bit == BitTable.B_0110_1101) P_0110_1101 = _data;
            if (_bit == BitTable.B_0110_1110) P_0110_1110 = _data;
            if (_bit == BitTable.B_0110_1111) P_0110_1111 = _data;
            if (_bit == BitTable.B_0111_0000) P_0111_0000 = _data;
            if (_bit == BitTable.B_0111_0001) P_0111_0001 = _data;
            if (_bit == BitTable.B_0111_0010) P_0111_0010 = _data;
            if (_bit == BitTable.B_0111_0011) P_0111_0011 = _data;
            if (_bit == BitTable.B_0111_0100) P_0111_0100 = _data;
            if (_bit == BitTable.B_0111_0101) P_0111_0101 = _data;
            if (_bit == BitTable.B_0111_0110) P_0111_0110 = _data;
            if (_bit == BitTable.B_0111_0111) P_0111_0111 = _data;
            if (_bit == BitTable.B_0111_1000) P_0111_1000 = _data;
            if (_bit == BitTable.B_0111_1001) P_0111_1001 = _data;
            if (_bit == BitTable.B_0111_1010) P_0111_1010 = _data;
            if (_bit == BitTable.B_0111_1011) P_0111_1011 = _data;
            if (_bit == BitTable.B_0111_1100) P_0111_1100 = _data;
            if (_bit == BitTable.B_0111_1101) P_0111_1101 = _data;
            if (_bit == BitTable.B_0111_1110) P_0111_1110 = _data;
            if (_bit == BitTable.B_0111_1111) P_0111_1111 = _data;
            if (_bit == BitTable.B_1000_0000) P_1000_0000 = _data;
            if (_bit == BitTable.B_1000_0001) P_1000_0001 = _data;
            if (_bit == BitTable.B_1000_0010) P_1000_0010 = _data;
            if (_bit == BitTable.B_1000_0011) P_1000_0011 = _data;
            if (_bit == BitTable.B_1000_0100) P_1000_0100 = _data;
            if (_bit == BitTable.B_1000_0101) P_1000_0101 = _data;
            if (_bit == BitTable.B_1000_0110) P_1000_0110 = _data;
            if (_bit == BitTable.B_1000_0111) P_1000_0111 = _data;
            if (_bit == BitTable.B_1000_1000) P_1000_1000 = _data;
            if (_bit == BitTable.B_1000_1001) P_1000_1001 = _data;
            if (_bit == BitTable.B_1000_1010) P_1000_1010 = _data;
            if (_bit == BitTable.B_1000_1011) P_1000_1011 = _data;
            if (_bit == BitTable.B_1000_1100) P_1000_1100 = _data;
            if (_bit == BitTable.B_1000_1101) P_1000_1101 = _data;
            if (_bit == BitTable.B_1000_1110) P_1000_1110 = _data;
            if (_bit == BitTable.B_1000_1111) P_1000_1111 = _data;
            if (_bit == BitTable.B_1001_0000) P_1001_0000 = _data;
            if (_bit == BitTable.B_1001_0001) P_1001_0001 = _data;
            if (_bit == BitTable.B_1001_0010) P_1001_0010 = _data;
            if (_bit == BitTable.B_1001_0011) P_1001_0011 = _data;
            if (_bit == BitTable.B_1001_0100) P_1001_0100 = _data;
            if (_bit == BitTable.B_1001_0101) P_1001_0101 = _data;
            if (_bit == BitTable.B_1001_0110) P_1001_0110 = _data;
            if (_bit == BitTable.B_1001_0111) P_1001_0111 = _data;
            if (_bit == BitTable.B_1001_1000) P_1001_1000 = _data;
            if (_bit == BitTable.B_1001_1001) P_1001_1001 = _data;
            if (_bit == BitTable.B_1001_1010) P_1001_1010 = _data;
            if (_bit == BitTable.B_1001_1011) P_1001_1011 = _data;
            if (_bit == BitTable.B_1001_1100) P_1001_1100 = _data;
            if (_bit == BitTable.B_1001_1101) P_1001_1101 = _data;
            if (_bit == BitTable.B_1001_1110) P_1001_1110 = _data;
            if (_bit == BitTable.B_1001_1111) P_1001_1111 = _data;
            if (_bit == BitTable.B_1010_0000) P_1010_0000 = _data;
            if (_bit == BitTable.B_1010_0001) P_1010_0001 = _data;
            if (_bit == BitTable.B_1010_0010) P_1010_0010 = _data;
            if (_bit == BitTable.B_1010_0011) P_1010_0011 = _data;
            if (_bit == BitTable.B_1010_0100) P_1010_0100 = _data;
            if (_bit == BitTable.B_1010_0101) P_1010_0101 = _data;
            if (_bit == BitTable.B_1010_0110) P_1010_0110 = _data;
            if (_bit == BitTable.B_1010_0111) P_1010_0111 = _data;
            if (_bit == BitTable.B_1010_1000) P_1010_1000 = _data;
            if (_bit == BitTable.B_1010_1001) P_1010_1001 = _data;
            if (_bit == BitTable.B_1010_1010) P_1010_1010 = _data;
            if (_bit == BitTable.B_1010_1011) P_1010_1011 = _data;
            if (_bit == BitTable.B_1010_1100) P_1010_1100 = _data;
            if (_bit == BitTable.B_1010_1101) P_1010_1101 = _data;
            if (_bit == BitTable.B_1010_1110) P_1010_1110 = _data;
            if (_bit == BitTable.B_1010_1111) P_1010_1111 = _data;
            if (_bit == BitTable.B_1011_0000) P_1011_0000 = _data;
            if (_bit == BitTable.B_1011_0001) P_1011_0001 = _data;
            if (_bit == BitTable.B_1011_0010) P_1011_0010 = _data;
            if (_bit == BitTable.B_1011_0011) P_1011_0011 = _data;
            if (_bit == BitTable.B_1011_0100) P_1011_0100 = _data;
            if (_bit == BitTable.B_1011_0101) P_1011_0101 = _data;
            if (_bit == BitTable.B_1011_0110) P_1011_0110 = _data;
            if (_bit == BitTable.B_1011_0111) P_1011_0111 = _data;
            if (_bit == BitTable.B_1011_1000) P_1011_1000 = _data;
            if (_bit == BitTable.B_1011_1001) P_1011_1001 = _data;
            if (_bit == BitTable.B_1011_1010) P_1011_1010 = _data;
            if (_bit == BitTable.B_1011_1011) P_1011_1011 = _data;
            if (_bit == BitTable.B_1011_1100) P_1011_1100 = _data;
            if (_bit == BitTable.B_1011_1101) P_1011_1101 = _data;
            if (_bit == BitTable.B_1011_1110) P_1011_1110 = _data;
            if (_bit == BitTable.B_1011_1111) P_1011_1111 = _data;
            if (_bit == BitTable.B_1100_0000) P_1100_0000 = _data;
            if (_bit == BitTable.B_1100_0001) P_1100_0001 = _data;
            if (_bit == BitTable.B_1100_0010) P_1100_0010 = _data;
            if (_bit == BitTable.B_1100_0011) P_1100_0011 = _data;
            if (_bit == BitTable.B_1100_0100) P_1100_0100 = _data;
            if (_bit == BitTable.B_1100_0101) P_1100_0101 = _data;
            if (_bit == BitTable.B_1100_0110) P_1100_0110 = _data;
            if (_bit == BitTable.B_1100_0111) P_1100_0111 = _data;
            if (_bit == BitTable.B_1100_1000) P_1100_1000 = _data;
            if (_bit == BitTable.B_1100_1001) P_1100_1001 = _data;
            if (_bit == BitTable.B_1100_1010) P_1100_1010 = _data;
            if (_bit == BitTable.B_1100_1011) P_1100_1011 = _data;
            if (_bit == BitTable.B_1100_1100) P_1100_1100 = _data;
            if (_bit == BitTable.B_1100_1101) P_1100_1101 = _data;
            if (_bit == BitTable.B_1100_1110) P_1100_1110 = _data;
            if (_bit == BitTable.B_1100_1111) P_1100_1111 = _data;
            if (_bit == BitTable.B_1101_0000) P_1101_0000 = _data;
            if (_bit == BitTable.B_1101_0001) P_1101_0001 = _data;
            if (_bit == BitTable.B_1101_0010) P_1101_0010 = _data;
            if (_bit == BitTable.B_1101_0011) P_1101_0011 = _data;
            if (_bit == BitTable.B_1101_0100) P_1101_0100 = _data;
            if (_bit == BitTable.B_1101_0101) P_1101_0101 = _data;
            if (_bit == BitTable.B_1101_0110) P_1101_0110 = _data;
            if (_bit == BitTable.B_1101_0111) P_1101_0111 = _data;
            if (_bit == BitTable.B_1101_1000) P_1101_1000 = _data;
            if (_bit == BitTable.B_1101_1001) P_1101_1001 = _data;
            if (_bit == BitTable.B_1101_1010) P_1101_1010 = _data;
            if (_bit == BitTable.B_1101_1011) P_1101_1011 = _data;
            if (_bit == BitTable.B_1101_1100) P_1101_1100 = _data;
            if (_bit == BitTable.B_1101_1101) P_1101_1101 = _data;
            if (_bit == BitTable.B_1101_1110) P_1101_1110 = _data;
            if (_bit == BitTable.B_1101_1111) P_1101_1111 = _data;
            if (_bit == BitTable.B_1110_0000) P_1110_0000 = _data;
            if (_bit == BitTable.B_1110_0001) P_1110_0001 = _data;
            if (_bit == BitTable.B_1110_0010) P_1110_0010 = _data;
            if (_bit == BitTable.B_1110_0011) P_1110_0011 = _data;
            if (_bit == BitTable.B_1110_0100) P_1110_0100 = _data;
            if (_bit == BitTable.B_1110_0101) P_1110_0101 = _data;
            if (_bit == BitTable.B_1110_0110) P_1110_0110 = _data;
            if (_bit == BitTable.B_1110_0111) P_1110_0111 = _data;
            if (_bit == BitTable.B_1110_1000) P_1110_1000 = _data;
            if (_bit == BitTable.B_1110_1001) P_1110_1001 = _data;
            if (_bit == BitTable.B_1110_1010) P_1110_1010 = _data;
            if (_bit == BitTable.B_1110_1011) P_1110_1011 = _data;
            if (_bit == BitTable.B_1110_1100) P_1110_1100 = _data;
            if (_bit == BitTable.B_1110_1101) P_1110_1101 = _data;
            if (_bit == BitTable.B_1110_1110) P_1110_1110 = _data;
            if (_bit == BitTable.B_1110_1111) P_1110_1111 = _data;
            if (_bit == BitTable.B_1111_0000) P_1111_0000 = _data;
            if (_bit == BitTable.B_1111_0001) P_1111_0001 = _data;
            if (_bit == BitTable.B_1111_0010) P_1111_0010 = _data;
            if (_bit == BitTable.B_1111_0011) P_1111_0011 = _data;
            if (_bit == BitTable.B_1111_0100) P_1111_0100 = _data;
            if (_bit == BitTable.B_1111_0101) P_1111_0101 = _data;
            if (_bit == BitTable.B_1111_0110) P_1111_0110 = _data;
            if (_bit == BitTable.B_1111_0111) P_1111_0111 = _data;
            if (_bit == BitTable.B_1111_1000) P_1111_1000 = _data;
            if (_bit == BitTable.B_1111_1001) P_1111_1001 = _data;
            if (_bit == BitTable.B_1111_1010) P_1111_1010 = _data;
            if (_bit == BitTable.B_1111_1011) P_1111_1011 = _data;
            if (_bit == BitTable.B_1111_1100) P_1111_1100 = _data;
            if (_bit == BitTable.B_1111_1101) P_1111_1101 = _data;
            if (_bit == BitTable.B_1111_1110) P_1111_1110 = _data;
            if (_bit == BitTable.B_1111_1111) P_1111_1111 = _data;
        }

        public Module GetPrototypeData(int _bit)
        {
            if (_bit == BitTable.B_0000_0000) return P_0000_0000;
            if (_bit == BitTable.B_0000_0001) return P_0000_0001;
            if (_bit == BitTable.B_0000_0010) return P_0000_0010;
            if (_bit == BitTable.B_0000_0011) return P_0000_0011;
            if (_bit == BitTable.B_0000_0100) return P_0000_0100;
            if (_bit == BitTable.B_0000_0101) return P_0000_0101;
            if (_bit == BitTable.B_0000_0110) return P_0000_0110;
            if (_bit == BitTable.B_0000_0111) return P_0000_0111;
            if (_bit == BitTable.B_0000_1000) return P_0000_1000;
            if (_bit == BitTable.B_0000_1001) return P_0000_1001;
            if (_bit == BitTable.B_0000_1010) return P_0000_1010;
            if (_bit == BitTable.B_0000_1011) return P_0000_1011;
            if (_bit == BitTable.B_0000_1100) return P_0000_1100;
            if (_bit == BitTable.B_0000_1101) return P_0000_1101;
            if (_bit == BitTable.B_0000_1110) return P_0000_1110;
            if (_bit == BitTable.B_0000_1111) return P_0000_1111;
            if (_bit == BitTable.B_0001_0000) return P_0001_0000;
            if (_bit == BitTable.B_0001_0001) return P_0001_0001;
            if (_bit == BitTable.B_0001_0010) return P_0001_0010;
            if (_bit == BitTable.B_0001_0011) return P_0001_0011;
            if (_bit == BitTable.B_0001_0100) return P_0001_0100;
            if (_bit == BitTable.B_0001_0101) return P_0001_0101;
            if (_bit == BitTable.B_0001_0110) return P_0001_0110;
            if (_bit == BitTable.B_0001_0111) return P_0001_0111;
            if (_bit == BitTable.B_0001_1000) return P_0001_1000;
            if (_bit == BitTable.B_0001_1001) return P_0001_1001;
            if (_bit == BitTable.B_0001_1010) return P_0001_1010;
            if (_bit == BitTable.B_0001_1011) return P_0001_1011;
            if (_bit == BitTable.B_0001_1100) return P_0001_1100;
            if (_bit == BitTable.B_0001_1101) return P_0001_1101;
            if (_bit == BitTable.B_0001_1110) return P_0001_1110;
            if (_bit == BitTable.B_0001_1111) return P_0001_1111;
            if (_bit == BitTable.B_0010_0000) return P_0010_0000;
            if (_bit == BitTable.B_0010_0001) return P_0010_0001;
            if (_bit == BitTable.B_0010_0010) return P_0010_0010;
            if (_bit == BitTable.B_0010_0011) return P_0010_0011;
            if (_bit == BitTable.B_0010_0100) return P_0010_0100;
            if (_bit == BitTable.B_0010_0101) return P_0010_0101;
            if (_bit == BitTable.B_0010_0110) return P_0010_0110;
            if (_bit == BitTable.B_0010_0111) return P_0010_0111;
            if (_bit == BitTable.B_0010_1000) return P_0010_1000;
            if (_bit == BitTable.B_0010_1001) return P_0010_1001;
            if (_bit == BitTable.B_0010_1010) return P_0010_1010;
            if (_bit == BitTable.B_0010_1011) return P_0010_1011;
            if (_bit == BitTable.B_0010_1100) return P_0010_1100;
            if (_bit == BitTable.B_0010_1101) return P_0010_1101;
            if (_bit == BitTable.B_0010_1110) return P_0010_1110;
            if (_bit == BitTable.B_0010_1111) return P_0010_1111;
            if (_bit == BitTable.B_0011_0000) return P_0011_0000;
            if (_bit == BitTable.B_0011_0001) return P_0011_0001;
            if (_bit == BitTable.B_0011_0010) return P_0011_0010;
            if (_bit == BitTable.B_0011_0011) return P_0011_0011;
            if (_bit == BitTable.B_0011_0100) return P_0011_0100;
            if (_bit == BitTable.B_0011_0101) return P_0011_0101;
            if (_bit == BitTable.B_0011_0110) return P_0011_0110;
            if (_bit == BitTable.B_0011_0111) return P_0011_0111;
            if (_bit == BitTable.B_0011_1000) return P_0011_1000;
            if (_bit == BitTable.B_0011_1001) return P_0011_1001;
            if (_bit == BitTable.B_0011_1010) return P_0011_1010;
            if (_bit == BitTable.B_0011_1011) return P_0011_1011;
            if (_bit == BitTable.B_0011_1100) return P_0011_1100;
            if (_bit == BitTable.B_0011_1101) return P_0011_1101;
            if (_bit == BitTable.B_0011_1110) return P_0011_1110;
            if (_bit == BitTable.B_0011_1111) return P_0011_1111;
            if (_bit == BitTable.B_0100_0000) return P_0100_0000;
            if (_bit == BitTable.B_0100_0001) return P_0100_0001;
            if (_bit == BitTable.B_0100_0010) return P_0100_0010;
            if (_bit == BitTable.B_0100_0011) return P_0100_0011;
            if (_bit == BitTable.B_0100_0100) return P_0100_0100;
            if (_bit == BitTable.B_0100_0101) return P_0100_0101;
            if (_bit == BitTable.B_0100_0110) return P_0100_0110;
            if (_bit == BitTable.B_0100_0111) return P_0100_0111;
            if (_bit == BitTable.B_0100_1000) return P_0100_1000;
            if (_bit == BitTable.B_0100_1001) return P_0100_1001;
            if (_bit == BitTable.B_0100_1010) return P_0100_1010;
            if (_bit == BitTable.B_0100_1011) return P_0100_1011;
            if (_bit == BitTable.B_0100_1100) return P_0100_1100;
            if (_bit == BitTable.B_0100_1101) return P_0100_1101;
            if (_bit == BitTable.B_0100_1110) return P_0100_1110;
            if (_bit == BitTable.B_0100_1111) return P_0100_1111;
            if (_bit == BitTable.B_0101_0000) return P_0101_0000;
            if (_bit == BitTable.B_0101_0001) return P_0101_0001;
            if (_bit == BitTable.B_0101_0010) return P_0101_0010;
            if (_bit == BitTable.B_0101_0011) return P_0101_0011;
            if (_bit == BitTable.B_0101_0100) return P_0101_0100;
            if (_bit == BitTable.B_0101_0101) return P_0101_0101;
            if (_bit == BitTable.B_0101_0110) return P_0101_0110;
            if (_bit == BitTable.B_0101_0111) return P_0101_0111;
            if (_bit == BitTable.B_0101_1000) return P_0101_1000;
            if (_bit == BitTable.B_0101_1001) return P_0101_1001;
            if (_bit == BitTable.B_0101_1010) return P_0101_1010;
            if (_bit == BitTable.B_0101_1011) return P_0101_1011;
            if (_bit == BitTable.B_0101_1100) return P_0101_1100;
            if (_bit == BitTable.B_0101_1101) return P_0101_1101;
            if (_bit == BitTable.B_0101_1110) return P_0101_1110;
            if (_bit == BitTable.B_0101_1111) return P_0101_1111;
            if (_bit == BitTable.B_0110_0000) return P_0110_0000;
            if (_bit == BitTable.B_0110_0001) return P_0110_0001;
            if (_bit == BitTable.B_0110_0010) return P_0110_0010;
            if (_bit == BitTable.B_0110_0011) return P_0110_0011;
            if (_bit == BitTable.B_0110_0100) return P_0110_0100;
            if (_bit == BitTable.B_0110_0101) return P_0110_0101;
            if (_bit == BitTable.B_0110_0110) return P_0110_0110;
            if (_bit == BitTable.B_0110_0111) return P_0110_0111;
            if (_bit == BitTable.B_0110_1000) return P_0110_1000;
            if (_bit == BitTable.B_0110_1001) return P_0110_1001;
            if (_bit == BitTable.B_0110_1010) return P_0110_1010;
            if (_bit == BitTable.B_0110_1011) return P_0110_1011;
            if (_bit == BitTable.B_0110_1100) return P_0110_1100;
            if (_bit == BitTable.B_0110_1101) return P_0110_1101;
            if (_bit == BitTable.B_0110_1110) return P_0110_1110;
            if (_bit == BitTable.B_0110_1111) return P_0110_1111;
            if (_bit == BitTable.B_0111_0000) return P_0111_0000;
            if (_bit == BitTable.B_0111_0001) return P_0111_0001;
            if (_bit == BitTable.B_0111_0010) return P_0111_0010;
            if (_bit == BitTable.B_0111_0011) return P_0111_0011;
            if (_bit == BitTable.B_0111_0100) return P_0111_0100;
            if (_bit == BitTable.B_0111_0101) return P_0111_0101;
            if (_bit == BitTable.B_0111_0110) return P_0111_0110;
            if (_bit == BitTable.B_0111_0111) return P_0111_0111;
            if (_bit == BitTable.B_0111_1000) return P_0111_1000;
            if (_bit == BitTable.B_0111_1001) return P_0111_1001;
            if (_bit == BitTable.B_0111_1010) return P_0111_1010;
            if (_bit == BitTable.B_0111_1011) return P_0111_1011;
            if (_bit == BitTable.B_0111_1100) return P_0111_1100;
            if (_bit == BitTable.B_0111_1101) return P_0111_1101;
            if (_bit == BitTable.B_0111_1110) return P_0111_1110;
            if (_bit == BitTable.B_0111_1111) return P_0111_1111;
            if (_bit == BitTable.B_1000_0000) return P_1000_0000;
            if (_bit == BitTable.B_1000_0001) return P_1000_0001;
            if (_bit == BitTable.B_1000_0010) return P_1000_0010;
            if (_bit == BitTable.B_1000_0011) return P_1000_0011;
            if (_bit == BitTable.B_1000_0100) return P_1000_0100;
            if (_bit == BitTable.B_1000_0101) return P_1000_0101;
            if (_bit == BitTable.B_1000_0110) return P_1000_0110;
            if (_bit == BitTable.B_1000_0111) return P_1000_0111;
            if (_bit == BitTable.B_1000_1000) return P_1000_1000;
            if (_bit == BitTable.B_1000_1001) return P_1000_1001;
            if (_bit == BitTable.B_1000_1010) return P_1000_1010;
            if (_bit == BitTable.B_1000_1011) return P_1000_1011;
            if (_bit == BitTable.B_1000_1100) return P_1000_1100;
            if (_bit == BitTable.B_1000_1101) return P_1000_1101;
            if (_bit == BitTable.B_1000_1110) return P_1000_1110;
            if (_bit == BitTable.B_1000_1111) return P_1000_1111;
            if (_bit == BitTable.B_1001_0000) return P_1001_0000;
            if (_bit == BitTable.B_1001_0001) return P_1001_0001;
            if (_bit == BitTable.B_1001_0010) return P_1001_0010;
            if (_bit == BitTable.B_1001_0011) return P_1001_0011;
            if (_bit == BitTable.B_1001_0100) return P_1001_0100;
            if (_bit == BitTable.B_1001_0101) return P_1001_0101;
            if (_bit == BitTable.B_1001_0110) return P_1001_0110;
            if (_bit == BitTable.B_1001_0111) return P_1001_0111;
            if (_bit == BitTable.B_1001_1000) return P_1001_1000;
            if (_bit == BitTable.B_1001_1001) return P_1001_1001;
            if (_bit == BitTable.B_1001_1010) return P_1001_1010;
            if (_bit == BitTable.B_1001_1011) return P_1001_1011;
            if (_bit == BitTable.B_1001_1100) return P_1001_1100;
            if (_bit == BitTable.B_1001_1101) return P_1001_1101;
            if (_bit == BitTable.B_1001_1110) return P_1001_1110;
            if (_bit == BitTable.B_1001_1111) return P_1001_1111;
            if (_bit == BitTable.B_1010_0000) return P_1010_0000;
            if (_bit == BitTable.B_1010_0001) return P_1010_0001;
            if (_bit == BitTable.B_1010_0010) return P_1010_0010;
            if (_bit == BitTable.B_1010_0011) return P_1010_0011;
            if (_bit == BitTable.B_1010_0100) return P_1010_0100;
            if (_bit == BitTable.B_1010_0101) return P_1010_0101;
            if (_bit == BitTable.B_1010_0110) return P_1010_0110;
            if (_bit == BitTable.B_1010_0111) return P_1010_0111;
            if (_bit == BitTable.B_1010_1000) return P_1010_1000;
            if (_bit == BitTable.B_1010_1001) return P_1010_1001;
            if (_bit == BitTable.B_1010_1010) return P_1010_1010;
            if (_bit == BitTable.B_1010_1011) return P_1010_1011;
            if (_bit == BitTable.B_1010_1100) return P_1010_1100;
            if (_bit == BitTable.B_1010_1101) return P_1010_1101;
            if (_bit == BitTable.B_1010_1110) return P_1010_1110;
            if (_bit == BitTable.B_1010_1111) return P_1010_1111;
            if (_bit == BitTable.B_1011_0000) return P_1011_0000;
            if (_bit == BitTable.B_1011_0001) return P_1011_0001;
            if (_bit == BitTable.B_1011_0010) return P_1011_0010;
            if (_bit == BitTable.B_1011_0011) return P_1011_0011;
            if (_bit == BitTable.B_1011_0100) return P_1011_0100;
            if (_bit == BitTable.B_1011_0101) return P_1011_0101;
            if (_bit == BitTable.B_1011_0110) return P_1011_0110;
            if (_bit == BitTable.B_1011_0111) return P_1011_0111;
            if (_bit == BitTable.B_1011_1000) return P_1011_1000;
            if (_bit == BitTable.B_1011_1001) return P_1011_1001;
            if (_bit == BitTable.B_1011_1010) return P_1011_1010;
            if (_bit == BitTable.B_1011_1011) return P_1011_1011;
            if (_bit == BitTable.B_1011_1100) return P_1011_1100;
            if (_bit == BitTable.B_1011_1101) return P_1011_1101;
            if (_bit == BitTable.B_1011_1110) return P_1011_1110;
            if (_bit == BitTable.B_1011_1111) return P_1011_1111;
            if (_bit == BitTable.B_1100_0000) return P_1100_0000;
            if (_bit == BitTable.B_1100_0001) return P_1100_0001;
            if (_bit == BitTable.B_1100_0010) return P_1100_0010;
            if (_bit == BitTable.B_1100_0011) return P_1100_0011;
            if (_bit == BitTable.B_1100_0100) return P_1100_0100;
            if (_bit == BitTable.B_1100_0101) return P_1100_0101;
            if (_bit == BitTable.B_1100_0110) return P_1100_0110;
            if (_bit == BitTable.B_1100_0111) return P_1100_0111;
            if (_bit == BitTable.B_1100_1000) return P_1100_1000;
            if (_bit == BitTable.B_1100_1001) return P_1100_1001;
            if (_bit == BitTable.B_1100_1010) return P_1100_1010;
            if (_bit == BitTable.B_1100_1011) return P_1100_1011;
            if (_bit == BitTable.B_1100_1100) return P_1100_1100;
            if (_bit == BitTable.B_1100_1101) return P_1100_1101;
            if (_bit == BitTable.B_1100_1110) return P_1100_1110;
            if (_bit == BitTable.B_1100_1111) return P_1100_1111;
            if (_bit == BitTable.B_1101_0000) return P_1101_0000;
            if (_bit == BitTable.B_1101_0001) return P_1101_0001;
            if (_bit == BitTable.B_1101_0010) return P_1101_0010;
            if (_bit == BitTable.B_1101_0011) return P_1101_0011;
            if (_bit == BitTable.B_1101_0100) return P_1101_0100;
            if (_bit == BitTable.B_1101_0101) return P_1101_0101;
            if (_bit == BitTable.B_1101_0110) return P_1101_0110;
            if (_bit == BitTable.B_1101_0111) return P_1101_0111;
            if (_bit == BitTable.B_1101_1000) return P_1101_1000;
            if (_bit == BitTable.B_1101_1001) return P_1101_1001;
            if (_bit == BitTable.B_1101_1010) return P_1101_1010;
            if (_bit == BitTable.B_1101_1011) return P_1101_1011;
            if (_bit == BitTable.B_1101_1100) return P_1101_1100;
            if (_bit == BitTable.B_1101_1101) return P_1101_1101;
            if (_bit == BitTable.B_1101_1110) return P_1101_1110;
            if (_bit == BitTable.B_1101_1111) return P_1101_1111;
            if (_bit == BitTable.B_1110_0000) return P_1110_0000;
            if (_bit == BitTable.B_1110_0001) return P_1110_0001;
            if (_bit == BitTable.B_1110_0010) return P_1110_0010;
            if (_bit == BitTable.B_1110_0011) return P_1110_0011;
            if (_bit == BitTable.B_1110_0100) return P_1110_0100;
            if (_bit == BitTable.B_1110_0101) return P_1110_0101;
            if (_bit == BitTable.B_1110_0110) return P_1110_0110;
            if (_bit == BitTable.B_1110_0111) return P_1110_0111;
            if (_bit == BitTable.B_1110_1000) return P_1110_1000;
            if (_bit == BitTable.B_1110_1001) return P_1110_1001;
            if (_bit == BitTable.B_1110_1010) return P_1110_1010;
            if (_bit == BitTable.B_1110_1011) return P_1110_1011;
            if (_bit == BitTable.B_1110_1100) return P_1110_1100;
            if (_bit == BitTable.B_1110_1101) return P_1110_1101;
            if (_bit == BitTable.B_1110_1110) return P_1110_1110;
            if (_bit == BitTable.B_1110_1111) return P_1110_1111;
            if (_bit == BitTable.B_1111_0000) return P_1111_0000;
            if (_bit == BitTable.B_1111_0001) return P_1111_0001;
            if (_bit == BitTable.B_1111_0010) return P_1111_0010;
            if (_bit == BitTable.B_1111_0011) return P_1111_0011;
            if (_bit == BitTable.B_1111_0100) return P_1111_0100;
            if (_bit == BitTable.B_1111_0101) return P_1111_0101;
            if (_bit == BitTable.B_1111_0110) return P_1111_0110;
            if (_bit == BitTable.B_1111_0111) return P_1111_0111;
            if (_bit == BitTable.B_1111_1000) return P_1111_1000;
            if (_bit == BitTable.B_1111_1001) return P_1111_1001;
            if (_bit == BitTable.B_1111_1010) return P_1111_1010;
            if (_bit == BitTable.B_1111_1011) return P_1111_1011;
            if (_bit == BitTable.B_1111_1100) return P_1111_1100;
            if (_bit == BitTable.B_1111_1101) return P_1111_1101;
            if (_bit == BitTable.B_1111_1110) return P_1111_1110;
            if (_bit == BitTable.B_1111_1111) return P_1111_1111;
            
            return null;
        }

        public Mesh GetPrototypeMesh(int _bit)
        {
            var _prototypeData = GetPrototypeData(_bit);

            if (_prototypeData != null)
            {
                return _prototypeData.MeshPrototype;
            }
            
            return null;
        }
    }
}
